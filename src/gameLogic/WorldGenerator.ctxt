#BlueJ class context
comment0.params=
comment0.target=WorldGenerator()
comment0.text=\r\n\ No\ argument\ constructor\ for\ WorldGenerator,\ standard\ world\ and\ 4\ divine\ realms.\r\n
comment1.params=
comment1.target=modelTypes.World\ generateStandardTerrain()
comment1.text=\r\n\ \r\n
comment10.params=x\ y\ iStep
comment10.target=float\ diamondAverage(float,\ float,\ float)
comment10.text=\r\n\ \ \ \ \ \ \ \ Takes\ the\ average\ of\ the\ four\ corners\ of\ the\ diamond.\r\n\ \ \ \ \ \ \ \ The\ corners\ are\ given\ by\ the\ location\ and\ the\ step\ size.\r\n\r\n\ \ \ \ \ \ \ \ --1--\ \ 1\ \=\ <\ x,\ y\ -\ step>\r\n\ \ \ \ \ \ \ \ -----\ \ 2\ \=\ <\ x\ +\ step,\ y>\r\n\ \ \ \ \ \ \ \ 4-*-2\ \ 3\ \=\ <\ x,\ y\ +\ step>\r\n\ \ \ \ \ \ \ \ -----\ \ 4\ \=\ <\ x\ -\ step,\ y>\r\n\ \ \ \ \ \ \ \ --3--\r\n\r\n\ \ \ \ \ \ \ \ @param\ x\ the\ x\ location\ of\ the\ center\ of\ the\ diamond\r\n\ \ \ \ \ \ \ \ @param\ y\ the\ y\ location\ of\ the\ center\ of\ the\ diamond\r\n\ \ \ \ \ \ \ \ @param\ iStep\ the\ step\ size\ of\ the\ sub\ division.\r\n\ \ \ \ \ \ \ \ @return\ the\ average\ of\ the\ elevations\ of\ the\ diamond.\r\n
comment11.params=fRange
comment11.target=float\ Random(float)
comment11.text=\r\n\ \ \ \ \ \ \ \ \ Generates\ a\ random\ value\ in\ the\ range\ from\ \ -\ range\ /\ 2\ to\ +\ range\ /2.\r\n\r\n\ \ \ \ \ \ \ \ \ @param\ fRange\ the\ range\ of\ the\ random\ number.\r\n\ \ \ \ \ \ \ \ \ @return\ the\ random\ number\ (\ -\ range/2\ ..\ +\ range/2\ ).\r\n
comment12.params=
comment12.target=void\ calcHighLowElevations()
comment12.text=\r\n\ \r\n
comment13.params=newWorld
comment13.target=modelTypes.World\ calculateNeighbours(modelTypes.World)
comment13.text=\r\n\ calculateNeighbours\r\n\ \r\n
comment14.params=newWorld
comment14.target=modelTypes.World\ calculateLakes(modelTypes.World)
comment14.text=\r\n\ calculateLakes\r\n\ \r\n
comment15.params=terrainMap\ id
comment15.target=void\ findNeighbours(java.util.HashMap,\ java.lang.Integer)
comment15.text=\r\n\ findNeighbours\r\n\ \r\n
comment16.params=terrainMap\ id
comment16.target=modelTypes.Terrain\ getLeftNeighbourMatches(java.util.HashMap,\ java.lang.Integer)
comment16.text=\r\n\ getLeftNeighbourMatches\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ to\ the\ left\ of\ same\ subtype\ (null\ if\ none)\r\n
comment17.params=terrainMap\ id
comment17.target=modelTypes.Terrain\ getRightNeighbourMatches(java.util.HashMap,\ java.lang.Integer)
comment17.text=\r\n\ getRightNeighbourMatches\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ to\ the\ right\ of\ same\ subtype\ (null\ if\ none)\r\n
comment18.params=terrainMap\ id
comment18.target=modelTypes.Terrain\ getAboveNeighbourMatches(java.util.HashMap,\ java.lang.Integer)
comment18.text=\r\n\ getAboveNeighbourMatches\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ above\ of\ same\ subtype\ (null\ if\ none)\r\n
comment19.params=terrainMap\ id
comment19.target=modelTypes.Terrain\ getBelowNeighbourMatches(java.util.HashMap,\ java.lang.Integer)
comment19.text=\r\n\ getBelowNeighbourMatches\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ below\ of\ same\ subtype\ (null\ if\ none)\r\n
comment2.params=
comment2.target=modelTypes.World\ generateCelestialTerrain()
comment2.text=\r\n\ \r\n
comment20.params=terrainMap\ id
comment20.target=modelTypes.Terrain\ getLeftAboveNeighbourMatches(java.util.HashMap,\ java.lang.Integer)
comment20.text=\r\n\ getLeftAboveNeighbourMatches\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ to\ the\ left\ and\ up\ (diagonal)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ same\ subtype\ (null\ if\ none)\r\n
comment21.params=terrainMap\ id
comment21.target=modelTypes.Terrain\ getRightAboveNeighbourMatches(java.util.HashMap,\ java.lang.Integer)
comment21.text=\r\n\ getRightAboveNeighbourMatches\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ to\ the\ right\ and\ up\ (diagonal)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ same\ subtype\ (null\ if\ none)\r\n
comment22.params=terrainMap\ id
comment22.target=modelTypes.Terrain\ getLeftBelowNeighbourMatches(java.util.HashMap,\ java.lang.Integer)
comment22.text=\r\n\ getLeftBelowNeighbourMatches\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ to\ the\ left\ and\ up\ (diagonal)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ same\ subtype\ (null\ if\ none)\r\n
comment23.params=terrainMap\ id
comment23.target=modelTypes.Terrain\ getRightBelowNeighbourMatches(java.util.HashMap,\ java.lang.Integer)
comment23.text=\r\n\ getRightBelowNeighbourMatches\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ to\ the\ right\ and\ up\ (diagonal)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ same\ subtype\ (null\ if\ none)\r\n
comment24.params=terrain\ otherTerrain
comment24.target=void\ compareAndSetTerrainName(modelTypes.Terrain,\ modelTypes.Terrain)
comment24.text=\r\n\ compareAndSetTerrainName\r\n\ \r\n\ @param\ terrain\ \ \ \ \:\ The\ terrain\ with\ the\ name\ to\ be\ set\r\n\ @param\ terrain\ \ \ \ \:\ A\ neighbouring\ terrain\r\n
comment25.params=type
comment25.target=java.lang.String\ generateName(java.lang.String)
comment25.text=\r\n\ generateName\r\n\ \r\n\ @param\ type\ \:\ a\ String\ defining\ terrain\ type\r\n\ @return\ \ \ \ \ \:\ a\ String\ name\r\n
comment26.params=terrainMap\ id
comment26.target=modelTypes.Terrain\ getLeftNeighbour(java.util.HashMap,\ java.lang.Integer)
comment26.text=\r\n\ getLeftNeighbour\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ to\ the\ left\ of\ same\ subtype\ (null\ if\ none)\r\n
comment27.params=terrainMap\ id
comment27.target=modelTypes.Terrain\ getRightNeighbour(java.util.HashMap,\ java.lang.Integer)
comment27.text=\r\n\ getRightNeighbour\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ to\ the\ right\ of\ same\ subtype\ (null\ if\ none)\r\n
comment28.params=terrainMap\ id
comment28.target=modelTypes.Terrain\ getAboveNeighbour(java.util.HashMap,\ java.lang.Integer)
comment28.text=\r\n\ getAboveNeighbour\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ above\ of\ same\ subtype\ (null\ if\ none)\r\n
comment29.params=terrainMap\ id
comment29.target=modelTypes.Terrain\ getLeftAboveNeighbour(java.util.HashMap,\ java.lang.Integer)
comment29.text=\r\n\ getLeftAboveNeighbour\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ to\ the\ left\ and\ up\ (diagonal)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ same\ subtype\ (null\ if\ none)\r\n
comment3.params=
comment3.target=modelTypes.World\ generateInfernalTerrain()
comment3.text=\r\n\ \r\n
comment30.params=terrainMap\ id
comment30.target=modelTypes.Terrain\ getRightAboveNeighbour(java.util.HashMap,\ java.lang.Integer)
comment30.text=\r\n\ getRightAboveNeighbour\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ to\ the\ right\ and\ up\ (diagonal)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ same\ subtype\ (null\ if\ none)\r\n
comment31.params=terrainMap\ id
comment31.target=modelTypes.Terrain\ getBelowNeighbour(java.util.HashMap,\ java.lang.Integer)
comment31.text=\r\n\ getBelowNeighbour\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ below\ of\ same\ subtype\ (null\ if\ none)\r\n
comment32.params=terrainMap\ id
comment32.target=modelTypes.Terrain\ getLeftBelowNeighbour(java.util.HashMap,\ java.lang.Integer)
comment32.text=\r\n\ getLeftBelowNeighbour\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ to\ the\ left\ and\ up\ (diagonal)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ same\ subtype\ (null\ if\ none)\r\n
comment33.params=terrainMap\ id
comment33.target=modelTypes.Terrain\ getRightBelowNeighbour(java.util.HashMap,\ java.lang.Integer)
comment33.text=\r\n\ getRightBelowNeighbour\r\n\ \r\n\ @param\ terrainMap\ \:\ The\ terrain\ map\r\n\ @param\ id\ \ \ \ \ \ \ \ \ \:\ The\ id\ of\ the\ current\ terrain\ square\r\n\ @return\ Terrain\ \ \ \:\ The\ terrain\ object\ found\ to\ the\ right\ and\ up\ (diagonal)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ same\ subtype\ (null\ if\ none)\r\n
comment34.params=x\ y
comment34.target=int\ convertXYtoGrid(int,\ int)
comment34.text=\r\n\ convertXYtoGrid\r\n\ \r\n\ @param\ x\ \:\ x-coordinate\r\n\ @param\ y\ \:\ y-coordinate\r\n\ @return\ \ \:\ an\ int\ representing\ position\ on\ an\ x,y\ grid,\ numbered\ from\ 0\r\n\ \ \ \ \ \ \ \ \ \ \ \ to\ (x+1)*(y+1)-1\ (eg.\ 0\ to\ 15\ for\ a\ 0-3,\ 0-3\ x\ and\ y\ axis)\r\n
comment35.params=terrain\ iSeason
comment35.target=float\ calculateTemperature(modelTypes.Terrain,\ int)
comment35.text=\r\n\ calculateTemperature\ calculates\ a\ base\ temperature\ for\ a\ square\ of\r\n\ terrain\ based\ on\ its\ location\ (polar,\ equator,\ or\ other),\ the\ amount\r\n\ of\ land\ surrounding\ the\ square,\ whether\ it\ is\ a\ water\ square\ or\ not,\r\n\ the\ season,\ and\ the\ elevation.\ \ Kelvin\ is\ used\ here.\r\n
comment36.params=terrainMap\ id\ iSeason
comment36.target=float\ scaledTemperature(java.util.HashMap,\ int,\ int)
comment36.text=\r\n\ scaledTemperature\ averages\ out\ the\ temperature\ of\ a\ terrain\ square\r\n\ based\ on\ surrounding\ squares\ (looking\ 2\ over\ in\ each\ direction).\r\n\ Celcius\ is\ used\ here.\r\n
comment37.params=newWorld
comment37.target=modelTypes.World\ computeTemperature(modelTypes.World)
comment37.text=\r\n\ computeTemperature\ calls\ calculateTemperature\ to\ calculate\ the\ base\r\n\ temperatures\ for\ each\ terrain\ square,\ and\ then\ scaledTemperature\ to\r\n\ make\ the\ changes\ more\ gradual\ from\ square\ to\ square.\r\n\ \r\n\ @param\ newWorld\r\n
comment38.params=terrain
comment38.target=int\ countland(modelTypes.Terrain)
comment38.text=\r\n\ \ \ \ \ \ Called\ by\ calculateTemperatures\ for\ each\ Terrain,\ this\ function\ looks\r\n\ \ \ \ \ \ in\ a\ 11\ wide\ by\ 5\ high\ box\ and\ counts\ the\ number\ of\ land\ squares\ \r\n\ \ \ \ \ \ found\ there.\ \ It\ compensates\ for\ y\ values\ off\ the\ map,\ and\ wraps\ x\r\n\ \ \ \ \ \ values\ around.\r\n
comment39.params=newWorld
comment39.target=modelTypes.World\ computePressure(modelTypes.World)
comment39.text=\r\n\ computePressure\ is\ a\ basic\ method\ to\ calculate\ pressure\ zones,\ used\ later\r\n\ for\ wind,\ rain,\ and\ climate.\r\n
comment4.params=
comment4.target=modelTypes.World\ generateNeutralTerrain()
comment4.text=\r\n\ \r\n
comment40.params=terrainMap\ terrain\ iSeason
comment40.target=modelTypes.GridVector\ calculateWind(java.util.HashMap,\ modelTypes.Terrain,\ int)
comment40.text=\r\n\ calculateWind\r\n
comment41.params=newWorld
comment41.target=modelTypes.World\ computeWind(modelTypes.World)
comment41.text=\r\n\ computeWind\ is\ a\ basic\ method\ for\ computing\ wind\ patterns.\r\n
comment42.params=terrainMap\ terrain\ iSeason
comment42.target=void\ calculateRainfallWithWind(java.util.HashMap,\ modelTypes.Terrain,\ int)
comment42.text=\r\n\ calculateRainfall\ calculates\ the\ first\ base\ values\ for\ rainfall\ with\ wind\r\n
comment43.params=newWorld
comment43.target=modelTypes.World\ computeRainfall(modelTypes.World)
comment43.text=\r\n\ computeRainfall\r\n
comment44.params=randomNumber\ terrainMap\ riverSet\ terrain
comment44.target=modelTypes.Terrain\ validDirection(int,\ java.util.HashMap,\ java.util.HashSet,\ modelTypes.Terrain)
comment44.text=\r\n\ validDirection\ determines\ if\ a\ randomly\ generated\ direction\ from\ the\r\n\ initial\ starting\ point\ is\ valid.\ \r\n
comment45.params=terrainMap\ riverSet\ terrain
comment45.target=modelTypes.Terrain\ hasValidExit(java.util.HashMap,\ java.util.HashSet,\ modelTypes.Terrain)
comment45.text=\r\n\ hasValidExit\ determines\ if\ a\ square\ on\ the\ grid\ has\ a\ valid\ exit\ and\r\n\ returns\ true\ when\ it\ does.\r\n
comment46.params=terrain\ otherTerrain
comment46.target=boolean\ unionPossible(modelTypes.Terrain,\ modelTypes.Terrain)
comment46.text=\r\n\ unionPossible\ checks\ if\ it\ is\ possible\ to\ join\ the\ roots\ of\ two\ points\r\n\ with\ the\ disjointedSet.\ \ If\ it\ is\ possible,\ the\ method\ returns\ true,\r\n\ otherwise\ false.\r\n\ \r\n\ @param\ point\ \ \ \ \:\ the\ first\ point\r\n\ @param\ newPoint\ \:\ the\ second\ point\r\n\ @return\ \ \ \ \ \ \ \ \ \:\ true\ if\ the\ union\ was\ possible,\ otherwise\ false\r\n
comment47.params=terrain\ otherTerrain
comment47.target=void\ calculateUnion(modelTypes.Terrain,\ modelTypes.Terrain)
comment47.text=\r\n\ calculateUnion\ determines\ the\ roots\ involved\ and\ performs\ a\ union\ between\r\n\ two\ cell\ values\ (representing\ two\ points\ in\ the\ maze).\r\n\ On\ a\ success\ it\ returns\ a\ Pair\ object\ with\ the\ information\ necessary\ to\ later\r\n\ pass\ on\ to\ observers\ (a\ point,\ and\ a\ direction).\ \ On\ a\ failure\ (which\ shouldn't\r\n\ happen)\ it\ returns\ null.\r\n\ \r\n\ @param\ point\ \ \ \ \ \:\ the\ point\ to\ exit\ from\r\n\ @param\ newPoint\ \ \:\ the\ new\ point\ the\ exit\ leads\ to\r\n\ @return\ \ \ \ \ \ \ \ \ \ \:\ an\ object\ of\ the\ Pair\ class,\ with\ Integer\ and\ Point.Direction\ values,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ or\ null\ on\ failure\r\n
comment48.params=terrainMap\ terrain\ riverName
comment48.target=void\ calculatePath(java.util.HashMap,\ modelTypes.Terrain,\ java.lang.String)
comment48.text=\r\n\ calculatePath\r\n
comment49.params=terrainMap\ terrain\ factor
comment49.target=void\ adjustRainfall(java.util.HashMap,\ modelTypes.Terrain,\ int)
comment49.text=\r\n\ \r\n
comment5.params=id\ x\ y\ z\ velocity\ direction\ name\ picture\ iDimensions\ iNumSeasons\ fRoughness
comment5.target=modelTypes.World\ generateTerrain(int,\ float,\ float,\ float,\ float,\ float,\ java.lang.String,\ java.lang.String,\ int,\ int,\ float)
comment5.text=\r\n\ \r\n
comment50.params=newWorld
comment50.target=modelTypes.World\ computeRivers(modelTypes.World)
comment50.text=\r\n\ computeRivers\r\n
comment51.params=terrain
comment51.target=void\ choosePicture(modelTypes.Terrain)
comment51.text=\r\n\ choosePicture\r\n
comment52.params=newWorld
comment52.target=modelTypes.World\ computeClimates(modelTypes.World)
comment52.text=\r\n\ computeClimates\r\n
comment53.params=newWorld
comment53.target=modelTypes.World\ fixPictures(modelTypes.World)
comment53.text=\r\n\ A\ fix\ for\ pictures\ and\ silt\ plains\r\n
comment54.params=newWorld
comment54.target=modelTypes.World\ createBigLakes(modelTypes.World)
comment55.params=newWorld\ stage
comment55.target=modelTypes.World\ seedSettlements(modelTypes.World,\ int)
comment56.params=terrainMap\ terrain
comment56.target=boolean\ besideLake(java.util.HashMap,\ modelTypes.Terrain)
comment56.text=\r\n\ \r\n
comment57.params=terrainMap\ terrain\ iterations
comment57.target=modelTypes.Terrain\ nearbySettlements(java.util.HashMap,\ modelTypes.Terrain,\ int)
comment57.text=\r\n\ \r\n
comment58.params=terrainMap\ terrain\ iterations
comment58.target=modelTypes.Terrain\ getNearbySettlement(java.util.HashMap,\ modelTypes.Terrain,\ int)
comment58.text=\r\n\ \r\n
comment6.params=
comment6.target=void\ generateElevations()
comment6.text=\r\n\ \ \ \ \ This\ function\ initializes\ the\ terrain\ in\ the\ map.\ \ It\ uses\r\n\ \ \ \ \ the\ dimaond\ square\ algorithm\ described\ in\ the\ desription\ of\r\n\ \ \ \ \ the\ Map\ class.\ \ The\ roughness\ paramater\ indicates\ the\ roughness\r\n\ \ \ \ \ of\ the\ terrain\ (\ values\ close\ to\ 0.0\ mean\ rougher,\ values\ close\r\n\ \ \ \ \ to\ or\ above\ 1.0\ mean\ smoother).\ \ The\ iterration\ paramater\ indicates\r\n\ \ \ \ \ how\ many\ Iterations\ of\ the\ algorithm\ are\ supposed\ to\ be\ used\r\n\ \ \ \ \ purely\ for\ initialization.\r\n\ \ \ \r\n\ \ \ \ \ The\ algorithm\ used\ to\ generate\ the\ terrain\ is\ called\ the\ "diamond\r\n\ \ \ \ \ square"\ algorithm.\ \ It\ subdivides\ the\ map\ like\ this\:\r\n\ \ \ \r\n\ \ \ \ \ Square\ \ Diamond\ Square\ \ Dimaond\ Square\r\n\ \ \ \r\n\ \ \ \ \ 1---1\ \ \ 1---1\ \ \ 1-3-1\ \ \ 1-3-1\ \ \ 15351\r\n\ \ \ \ \ -----\ \ \ -----\ \ \ -----\ \ \ -4-4-\ \ \ 54545\r\n\ \ \ \ \ -----\ \ \ --2--\ \ \ 3-2-3\ \ \ 3-2-3\ \ \ 35253\r\n\ \ \ \ \ -----\ \ \ -----\ \ \ -----\ \ \ -4-4-\ \ \ 54545\r\n\ \ \ \ \ 1---1\ \ \ 1---1\ \ \ 1-3-1\ \ \ 1-3-1\ \ \ 15351\r\n\ \ \ \r\n\ \ \ \ \ In\ the\ dimaond\ step\ the\ four\ corners\ of\ the\ squares\ are\ taken\ and\r\n\ \ \ \ \ averaged\ to\ that\ we\ add\ a\ random\ amount\ to\ generate\ a\ value\ at\ the\r\n\ \ \ \ \ center\ of\ the\ squares.\ \ This\ generates\ diamonds.\ \ In\ the\ square\ step\r\n\ \ \ \ \ the\ four\ corners\ of\ the\ dimaond\ are\ average\ to\ generate\ a\ value\ at\r\n\ \ \ \ \ the\ center\ of\ the\ dimaonds.\ \ Again\ a\ random\ amount\ is\ added\ to\ the\r\n\ \ \ \ \ new\ value.\ \ This\ generates\ squares.\ \ This\ is\ repeated\ until\ the\ entire\r\n\ \ \ \ \ map\ is\ filled.\ \ With\ each\ iterration\ the\ range\ of\ the\ random\ value\r\n\ \ \ \ \ generator\ is\ multiplied\ by\ 2^H\ (where\ H\ is\ the\ roughness\ value).\r\n
comment7.params=x\ y
comment7.target=modelTypes.GridVector\ locateVector(float,\ float)
comment7.text=\r\n\ Searches\ the\ heightList\ ArrayList\ for\ a\ GridVector\ with\ the\ given\ x,\ y\r\n\ coordinates.\r\n\ Due\ to\ the\ way\ the\ vectors\ are\ created,\ this\ is\ necessary\ until\ they\ are\r\n\ later\ referencable\ by\ position\ in\ the\ heightMap\ HashMap.\r\n\r\n@param\ x\ \:\ the\ x-coordinate\r\n@param\ y\ \:\ the\ y-coordinate\r\n@return\ \ \:\ a\ gridvector\ in\ the\ height\ list\ with\ the\ given\ x\ and\ y\ coordinates\r\n
comment8.params=x\ y
comment8.target=float\ getHeight(float,\ float)
comment8.text=\r\n\ Uses\ locateVector\ to\ Searches\ the\ heightList\ ArrayList\ for\ a\ GridVector\r\n\ with\ the\ given\ x,\ y\ coordinates,\ and\ returns\ its\ z\ value.\r\n\r\n@param\ x\ \:\ the\ x-coordinate\r\n@param\ y\ \:\ the\ y-coordinate\r\n@return\ \ \:\ a\ float\ representing\ height\r\n
comment9.params=x\ y\ iStep
comment9.target=float\ squareAverage(float,\ float,\ float)
comment9.text=\r\n\ \ \ \ \ \ Takes\ the\ average\ of\ the\ four\ corners\ of\ the\ square.\r\n\ \ \ \ \ \ The\ corners\ are\ given\ by\ the\ location\ and\ the\ step\ size.\r\n\ \ \ \ \r\n\ \ \ \ \ \ 1---2\ \ 1\ \=\ <\ x\ -\ step,\ y\ -\ step>\r\n\ \ \ \ \ \ -----\ \ 2\ \=\ <\ x\ +\ step,\ y\ -\ step>\r\n\ \ \ \ \ \ --*--\ \ 3\ \=\ <\ x\ -\ step,\ y\ +\ step>\r\n\ \ \ \ \ \ -----\ \ 4\ \=\ <\ x\ +\ step,\ y\ +\ step>\r\n\ \ \ \ \ \ 3---4\r\n\r\n\ \ \ \ \ \ @param\ x\ the\ x\ location\ of\ the\ center\ of\ the\ square\r\n\ \ \ \ \ \ @param\ y\ the\ y\ location\ of\ the\ center\ of\ the\ square\r\n\ \ \ \ \ \ @param\ sStep\ the\ step\ size\ of\ the\ sub\ division.\r\n\ \ \ \ \ \ @return\ the\ average\ of\ the\ elevations\ of\ the\ square.\r\n
numComments=59
