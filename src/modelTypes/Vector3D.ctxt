#BlueJ class context
comment0.params=
comment0.target=Vector3D()
comment0.text=\r\n\ No\ argument\ constructor\ creates\ a\ new\ Vector3D\ at\ (0,0,0).\r\n
comment1.params=vector
comment1.target=Vector3D(Vector3D)
comment1.text=\r\n\ Constructor\ creates\ a\ new\ Vector3D\ with\ the\ same\ values\ as\ the\ specified\ Vector3D.\r\n\ \r\n\ @param\ vector\ \:\ a\ Vector3D\ vector\r\n
comment10.params=x\ y\ z
comment10.target=void\ setByXYZ(float,\ float,\ float)
comment10.text=\r\n\ Sets\ this\ vector\ to\ the\ specified\ (x,\ y,\ z)\ values.\r\n\ \r\n\ @param\ x\r\n\ @param\ y\r\n\ @param\ z\r\n
comment11.params=x\ y\ z
comment11.target=void\ addXYZ(float,\ float,\ float)
comment11.text=\r\n\ Adds\ the\ specified\ (x,y,z)\ values\ to\ this\ vector.\r\n\ \r\n\ @param\ x\r\n\ @param\ y\r\n\ @param\ z\r\n
comment12.params=x\ y\ z
comment12.target=void\ subtractXYZ(float,\ float,\ float)
comment12.text=\r\n\ Subtracts\ the\ specified\ (x,\ y,\ z)\ values\ to\ this\ vector.\r\n\ \r\n\ @param\ x\r\n\ @param\ y\r\n\ @param\ z\r\n
comment13.params=vector
comment13.target=void\ addVector(Vector3D)
comment13.text=\r\n\ Adds\ the\ specified\ vector\ to\ this\ vector.\r\n\ \r\n\ @param\ vector\r\n
comment14.params=vector
comment14.target=void\ subtractVector(Vector3D)
comment14.text=\r\n\ Subtracts\ the\ specified\ vector\ from\ this\ vector.\r\n\ \r\n\ @param\ vector\r\n
comment15.params=s
comment15.target=void\ multiplyXYZ(float)
comment15.text=\r\n\ Multiplies\ this\ vector\ by\ the\ specified\ value.\ The\ new\ length\r\n\ of\ this\ vector\ will\ be\ length()*s.\r\n\ \r\n\ @param\ s\r\n
comment16.params=s
comment16.target=void\ divideXYZ(float)
comment16.text=\r\n\ Divides\ this\ vector\ by\ the\ specified\ value.\ The\ new\ length\r\n\ of\ this\ vector\ will\ be\ length()/s.\r\n\ \r\n\ @param\ s\r\n
comment17.params=
comment17.target=float\ length()
comment17.text=\r\n\ Returns\ the\ length\ of\ this\ vector\ as\ a\ float.\r\n\ \r\n\ @return\r\n
comment18.params=
comment18.target=void\ normalize()
comment18.text=\r\n\ Converts\ this\ Vector3D\ to\ a\ unit\ vector,\ or\ in\ other\ words,\ a\ vector\r\n\ of\ length\ 1.\ Same\ as\ calling\ v.divide(v.length()).\r\n\ \r\n
comment19.params=angle
comment19.target=void\ rotateX(float)
comment19.text=\r\n\ Rotate\ this\ vector\ around\ the\ x\ axis\ the\ specified\ amount.\r\n\ The\ specified\ angle\ is\ in\ radians.\ Use\ Math.toRadians()\ to\r\n\ convert\ from\ degrees\ to\ radians.\r\n\ \r\n\ @param\ angle\r\n
comment2.params=x\ y\ z
comment2.target=Vector3D(float,\ float,\ float)
comment2.text=\r\n\ Constructor\ creates\ a\ new\ Vector3D\ with\ the\ specified\ (x,y,z)\ values.\r\n\ \r\n\ @param\ x\ \:\ a\ float\ representing\ an\ x-coordinate\r\n\ @param\ y\ \:\ a\ float\ representing\ a\ y-coordinate\r\n\ @param\ z\ \:\ a\ float\ representing\ a\ z-coordinate\r\n
comment20.params=angle
comment20.target=void\ rotateY(float)
comment20.text=\r\n\ Rotate\ this\ vector\ around\ the\ y\ axis\ the\ specified\ amount.\r\n\ The\ specified\ angle\ is\ in\ radians.\ Use\ Math.toRadians()\ to\r\n\ convert\ from\ degrees\ to\ radians.\r\n\ \r\n\ @param\ angle\r\n
comment21.params=angle
comment21.target=void\ rotateZ(float)
comment21.text=\r\n\ Rotate\ this\ vector\ around\ the\ z\ axis\ the\ specified\ amount.\r\n\ The\ specified\ angle\ is\ in\ radians.\ Use\ Math.toRadians()\ to\r\n\ convert\ from\ degrees\ to\ radians.\r\n\ \r\n\ @param\ angle\r\n
comment22.params=cosAngle\ sinAngle
comment22.target=void\ rotateX(float,\ float)
comment22.text=\r\n\ Rotate\ this\ vector\ around\ the\ x\ axis\ the\ specified\ amount,\r\n\ using\ pre-computed\ cosine\ and\ sine\ values\ of\ the\ angle\ to\r\n\ rotate.\r\n\ \r\n\ @param\ cosAngle\r\n\ @param\ sinAngle\r\n
comment23.params=cosAngle\ sinAngle
comment23.target=void\ rotateY(float,\ float)
comment23.text=\r\n\ Rotate\ this\ vector\ around\ the\ y\ axis\ the\ specified\ amount,\r\n\ using\ pre-computed\ cosine\ and\ sine\ values\ of\ the\ angle\ to\r\n\ rotate.\r\n\ \r\n\ @param\ cosAngle\r\n\ @param\ sinAngle\r\n
comment24.params=cosAngle\ sinAngle
comment24.target=void\ rotateZ(float,\ float)
comment24.text=\r\n\ Rotate\ this\ vector\ around\ the\ y\ axis\ the\ specified\ amount,\r\n\ using\ pre-computed\ cosine\ and\ sine\ values\ of\ the\ angle\ to\r\n\ rotate.\r\n\ \r\n\ @param\ cosAngle\r\n\ @param\ sinAngle\r\n
comment25.params=xform
comment25.target=void\ add(Transform3D)
comment25.text=\r\n\ Adds\ the\ specified\ transform\ to\ this\ vector.\ This\ vector\r\n\ is\ first\ rotated,\ then\ translated.\r\n\ \r\n\ @param\ xform\ \r\n
comment26.params=xform
comment26.target=void\ subtract(Transform3D)
comment26.text=\r\n\ Subtracts\ the\ specified\ transform\ to\ this\ vector.\ This\r\n\ vector\ translated,\ then\ rotated.\r\n\ \r\n\ @param\ xform\ \r\n
comment27.params=xform
comment27.target=void\ addRotation(Transform3D)
comment27.text=\r\n\ Rotates\ this\ vector\ with\ the\ angle\ of\ the\ specified\ transform.\r\n\ \r\n\ @param\ xform\r\n
comment28.params=xform
comment28.target=void\ subtractRotation(Transform3D)
comment28.text=\r\n\ Rotates\ this\ vector\ with\ the\ opposite\ angle\ of\ the\r\n\ specified\ transform.\r\n\ \r\n\ @param\ xform\r\n
comment29.params=vector
comment29.target=float\ getDotProduct(Vector3D)
comment29.text=\r\n\ Returns\ the\ dot\ product\ of\ this\ vector\ and\ the\ specified\ vector.\r\n\ \r\n\ @param\ v\r\n\ @return\r\n
comment3.params=
comment3.target=float\ getX()
comment3.text=\r\n\ getX\ returns\ the\ float\ representing\ the\ x-coordinate\r\n\ \r\n\ @return\ \:\ a\ float\ representing\ the\ x-coordinate\r\n
comment30.params=u\ v
comment30.target=void\ setToCrossProduct(Vector3D,\ Vector3D)
comment30.text=\r\n\ Sets\ this\ vector\ to\ the\ cross\ product\ of\ the\ two\r\n\ specified\ vectors.\ Either\ of\ the\ specified\ vectors\ can\r\n\ be\ this\ vector\r\n\ \r\n\ @param\ u\r\n\ @param\ v\r\n
comment31.params=
comment31.target=java.lang.String\ toString()
comment31.text=\r\n\ \ Converts\ this\ Vector\ to\ a\ String\ representation.\r\n
comment32.params=
comment32.target=Vector3D\ clone()
comment32.text=\r\n\ \ This\ is\ the\ clone\ method\ for\ Vector3D.\ \ It\ overrides\ the\ clone()\r\n\ \ method\ of\ object,\ and\ is\ meant\ to\ be\ overridden\ where\ needed\ by\r\n\ \ subclass\ methods.\ \r\n
comment33.params=obj
comment33.target=boolean\ equals(java.lang.Object)
comment33.text=\r\n\ An\ equals\ method\ for\ Vector3D\ that\ compares\ x,\ y,\ and\ z\ coordinates,\r\n\ as\ well\ as\ velocity\ and\ direction.\r\n\ \r\n\ @param\ obj\ \:\ an\ object\ to\ compare\ with\r\n
comment34.params=
comment34.target=int\ hashCode()
comment34.text=\r\n\ \ A\ basic\ hashCode\ method\ for\ Vector3D,\ for\ the\ x,\ y,\ and\ z\ fields\r\n\ \ compared\ in\ the\ equals\ method.\r\n\ \ \r\n\ \ @return\ \:\ an\ integer\ value\r\n
comment4.params=x
comment4.target=void\ setX(float)
comment4.text=\r\n\ setX\ sets\ the\ float\ representing\ the\ x-coordinate\r\n\ \r\n\ @param\ \:\ a\ float\ representing\ the\ x-coordinate\r\n
comment5.params=
comment5.target=float\ getY()
comment5.text=\r\n\ getY\ returns\ the\ float\ representing\ the\ y-coordinate\r\n\ \r\n\ @return\ \:\ a\ float\ representing\ the\ y-coordinate\r\n
comment6.params=y
comment6.target=void\ setY(float)
comment6.text=\r\n\ setY\ sets\ the\ float\ representing\ the\ y-coordinate\r\n\ \r\n\ @param\ \:\ a\ float\ representing\ the\ y-coordinate\r\n
comment7.params=
comment7.target=float\ getZ()
comment7.text=\r\n\ getZ\ returns\ the\ float\ representing\ the\ z-coordinate\r\n\ \r\n\ @return\ \:\ a\ float\ representing\ the\ z-coordinate\r\n
comment8.params=z
comment8.target=void\ setZ(float)
comment8.text=\r\n\ setZ\ sets\ the\ float\ representing\ the\ z-coordinate\r\n\ \r\n\ @param\ \:\ a\ float\ representing\ the\ z-coordinate\r\n
comment9.params=vector
comment9.target=void\ setByVector(Vector3D)
comment9.text=\r\n\ Sets\ the\ vector\ to\ the\ same\ values\ as\ the\ specified\ Vector3D.\r\n\ \r\n\ @param\ vector\r\n
numComments=35
